<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf8">
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Survs Gallery</title>
    <meta name="theme-color" content="#ff4c4c">
    <meta name="description" content="Surv's extension gallery :D">
    <meta content="https://surv.is-a.dev/survs-gallery/" property="og:url" />
    <meta content="https://surv.is-a.dev/survs-gallery/images/unknown.svg/" property="og:image" />
    <link rel="icon" type="image/x-icon" href="favicon.ico" />
    <style>
      :root {
        font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;
        color-scheme: light dark;
      }
      @media (prefers-color-scheme: dark) {
        :root {
          color: #eee;
          background: #111;
        }
        a {
          color: #56b2ff;
        }
        a:visited {
          color: #f192ff;
        }
        a:active {
          color: red;
        }
        .invert-dark {
          filter: invert(100%);
        }
      }

      h1 {
        margin: 16px 0;
      }
      h2, h3, p {
        margin: 8px 0;
      }

      .section {
        max-width: 928px;
        margin: 24px auto;
      }

      .header h1 {
        font-size: 2.5em;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: normal;
        text-align: center;
      }
      .header .head-image {
        border-radius: 50%;
        width: 56px;
        height: 56px;
        flex-shrink: 0;
        margin: 0 8px 0 0;
      }
      @media (max-width: 750px) {
        .header h1 {
          flex-direction: column;
        }
        .header .head-image {
          margin: 0 0 8px 0;
        }
      }

      .infobox, .development-tools {
        padding: 8px;
        margin: 8px 0;
        border-radius: 8px;
        background: rgba(0, 195, 255, 0.245);
        border: 1px solid rgba(0, 187, 255, 0.604);
      }
      .infobox-warning {
        background-color: rgba(255, 0, 0, 0.245);
        border-color: rgba(255, 0, 0, 0.446);
      }
      .infobox-title {
        font-weight: bold;
        margin-bottom: 4px;
      }

      .development-tools {
        background-color: rgba(200, 0, 255, 0.245);
        border-color: rgba(234, 0, 255, 0.604);
      }
      .development-tools h2 {
        font-size: 1em;
      }

      .extensions {
        display: -ms-grid;
        display: grid;
        grid-template-columns: 1fr 1fr 1fr;
        margin: 16px -4px;
      }

      /* thanks nexuskitten for letting me use this ðŸ’– */
      .extension-boxing-outer {
        width: 100px;
        height: fit-content;
      }
      .extension-boxing-inner {
        text-align: left;
        font-size: 10px;
        line-height: 60%;
      }
      .extended-box {
        float: left;
      }
      .credit-box {
        float: right;
      }
      .extension-tags {
        margin-left: 10px;
        width: 100px;
        height: 40px;
      }
      .extension-tag-icon {
        vertical-align: middle;
        margin-right: 4px;
      }
      .extension-news-banner {
        position: absolute;
        right: 0;
        top: 0;
        aspect-ratio: 1/1;
        width: 25%;
        height: auto;
      }
      /* end block */

      .i-card-wrapper {
        opacity: 0;
        transition: opacity .15s;
      }

      .i-card {
        position: absolute;
        top: 0;
        left: 0;
        margin: 2%;
      }

      .search-outer {
        position: relative;
        height: 100%;
        padding-top: 1rem;
        padding-bottom: 1rem;
        padding-left: 0.5rem;
        padding-right: 0.5rem;
        margin: 0px 0.75rem 0px 0px;
        background: #404040;
        border-radius: 4px;
        border-width: 2%;
        border-style: solid;
        border-color: #2c2c2c;
        display: flexbox;
        display: -ms-flexbox;
        display: -webkit-flexbox;
      }

      .search-outer * {
        display: inline-block;
        padding-block: 1px;
        padding-inline: 2px;
      }

      .search-input {
        background-color: #1e1e1e;
        font-size: 1rem;
        font-weight: bold;
        border-radius: 4px;
        border-width: 1px;
        border-style: solid;
        border-color: #404040;
        color: #ffffff;
        height: 100%;
        writing-mode: horizontal-tb !important;
      }

      .search-tag {
        padding-left: 1%;
        padding-right: 1%;
        margin-left: 1.5%;
        border-radius: 6px;
        border-width: 10%;
        border-style: solid;
        color: white;
        user-select: none;
      }

      .search-tag * {
        pointer-events: none;
      }

      .search-tag[data-active="1"] {
        border-color: #272727;
        background-color: #454545
      }

      .search-tag[data-active="0"] {
        border-color: #1e1e1e;
        background-color: #2a2a2a
      }

      .extension-search-tags {
        display: none;
      }

      @media (max-width: 218px) {
        .toSmall-box {
          position: absolute;
          left: 0px;
          top: 0px;
          display: block;
          z-index: 32767;
          width: 100vw;
          height: 100vh;
          background: #000000;
          color: #FFFFFF;
        }
        * {
          scrollbar-width: 0px;
          overflow: hidden;
        }
      }
      @media (min-width: 218px) {
        .toSmall-box {
          display: none;
        }
      }
      @media (max-width: 944px) {
        .extensions {
          grid-template-columns: 1fr 1fr;
        }
      }
      @media (max-width: 650px) {
        .extensions {
          grid-template-columns: 1fr;
        }
      }

      .extension {
        border: 2px solid #ccc;
        border-radius: 8px;
        margin: 4px;
        overflow: hidden;
        padding: 8px;
      }
      @media (prefers-color-scheme: dark) {
        .extension {
          border-color: #333;
        }
      }
      .extension h3 {
        font-size: 1.5em;
      }
      .extension-banner {
        position: relative;
        margin: -8px -8px 0 -8px;
      }
      .extension-image {
        display: block;
        width: 100%;
        /* TODO: see if there's another way to do this that works in older browsers too */
        aspect-ratio: 2 / 1;
      }

      .extension-buttons {
        position: absolute;
        top: 0;
        left: 0;
        display: flex;
        flex-wrap: wrap;
        width: 100%;
        height: 100%;
        align-items: center;
        align-content: center;
        justify-content: center;
        gap: 0.5rem;
        opacity: 0;
        transition: opacity .15s;
        background: rgba(0, 0, 0, 0.5);
        pointer-events: none;
      }
      .extension:hover .extension-buttons, .extension:focus-within .extension-buttons {
        opacity: 1;
      }
      .extension:hover .i-card-wrapper, .extension:focus-within .i-card-wrapper {
        opacity: 0.9;
      }
      .extension:hover .extension-buttons {
        backdrop-filter: blur(0.6px);
      }
      .extension-buttons > * {
        padding: 8px;
        background-color: #4c97ff;
        border-radius: 8px;
        border: none;
        font: inherit;
        cursor: pointer;
        color: white;
        text-decoration: none;
        pointer-events: auto;
        transition: filter 0.15s;
        filter: drop-shadow(0px 1px 3px #00000075);
      }
      .extension-buttons > *:hover {
        filter: drop-shadow(0px 1px 7px black);
        z-index: 1;
      }
      .extension-buttons *:active {
        filter: brightness(0.85) drop-shadow(0px 1px 2px #00000075);
      }
      .extension-buttons *:disabled {
        opacity: 0.5;
      }
      .extension-buttons .copy {
        margin: 0 8px 0 0;
      }
      .extension-buttons .open {
        background-color: #ff4c4c;
        color: white;
      }
      .extension-buttons .copy-url {
        margin: 0 8px 0 0;
        background-color: #FFAB19;
        color: white;
      }
      .extension-buttons :disabled {
        opacity: 0.5;
      }

      footer {
        opacity: 0.8;
        width: 100%;
        text-align: center;
        margin-bottom: 16px;
      }
      footer p {
        margin: 0 0 8px 0;
      }
    </style>
  </head>

  <body>

    <div class="toSmall-box">Your screen is too small for this gallery.</div>

    <div class="section header">
      <h1>
        <img src="./assets/header-image.jpg" aria-hidden="true" class="head-image"></img>
        <div>Survs Gallery</div>
      </h1>

      <p>Self ad: <a href="/TWunlocked/">TWunlocked</a>.</p>

      <div class="infobox infobox-warning">
        <div class="infobox-title">These extensions are not compatible with Scratch.</div>
        Projects that use these extensions can't be uploaded to the Scratch website or loaded into turbowarp with sandbox enabled.
        They can, however, be used in <a href="https://packager.turbowarp.org/">the packager</a></a>.
      </div>

    <%
    const getLinkToRun = (extensionPath) => `https://turbowarp.org/editor?extension=${host}${extensionPath}`;
    %>

    <% if (mode === "development") { %>
      <div class="section">
        <div class="development-tools">
          <h2>Development Server Tools</h2>
          <p>
            Most recently modified extensions:
            <% for (const extension of mostRecentExtensions) { %>
              <a href="<%= getLinkToRun(extension) %>"><%= extension %></a>
            <% } %>
          </p>
        </div>
      </div>
    <% } %>

    <script>
      const queryParams = new URL(document.location.href).searchParams;
      window.onmessage = (event) => {
        window.opener.postMessage({ loaded: true });
        const obj = event.data;
        if (typeof obj !== 'object') {
          console.warn('Received invalid data in POST-MESSAGE.', event);
          return;
        }
        if (obj.killSelf) {
          window.close();
          return;
        }
        if (!obj.twu) {
          console.warn('Simple trust was not granted.');
          return;
        }
        window.opener.postMessage({ response: true, confirm: true, ...obj });
      }
      window.onbeforeunload = () => {
        window.opener.postMessage({ kill: true });
      }
      window.TWUextensionPage = true;
      function writeText(text) {
        if (navigator.clipboard && navigator.clipboard.writeText) {
          navigator.clipboard.writeText(text);
        } else {
          var input = document.createElement('input');
          input.value = text;
          input.style.top = '0';
          input.style.left = '0';
          input.style.position = 'fixed';
          document.body.appendChild(input);
          input.focus();
          input.select();
          try {
            document.execCommand('copy');
          } catch (e) {
            console.error(e);
          }
          document.body.removeChild(input);
          e.target.focus();
        }
      }
      document.addEventListener('click', function (e) {
        const toPost = e.target.getAttribute('data-post');
        if (toPost) {
          window.opener.postMessage({ response: true, url: toPost });
          return;
        }
        const toCopy = e.target.getAttribute('data-copy');
        if (toCopy) {
          writeText(toCopy);
          return;
        }
        const toCopyData = e.target.getAttribute('data-url');
        if (toCopyData) {
          fetch(toCopyData).then(response => response.text()).then(data => {writeText(data)});
          return;
        }
        const iCardURL = e.target.getAttribute('data-icard');
        if (iCardURL && iCardURL != 'null') {
          window.open(iCardURL);
          return;
        }
        const searchTag = e.target.getAttribute('data-tag');
        if (searchTag) {
          const tagActive = parseInt(e.target.getAttribute('data-active'));
          if (tagActive  > 0) {
            e.target.setAttribute('data-active', '0');
          } else e.target.setAttribute('data-active', '1');
          searchViaTags();
        }
      });
    </script>

    <script defer>
      const search = function(query) {
        document.querySelectorAll('div.extension').forEach(div => {
          if (div.dataset.nosearch) return;
          div.style.display = '';
          let creditsText = div.querySelector('div.extension-boxing-inner');
          if (!creditsText || creditsText == null) {
              creditsText = '';
          } else creditsText = creditsText.innerText;
          let description = div.querySelector('p');
          if (!description || description == null) {
              description = '';
          } else description = description.innerText;
          let title = div.querySelector('h3');
          if (!title || title == null) {
              title = '';
          } else title = title.innerText;
          let joinedData = `${creditsText}\n${description}\n${title}`.toLowerCase();
          const foundText = joinedData.includes(query.toLowerCase());
          if (foundText) return;
          div.style.display = 'none';
        });
      }

      const searchViaTags = function() {
        const activeTags = Array.from(document.querySelectorAll('.search-tag[data-active="1"]')).map(tag => tag.innerText);
        document.querySelectorAll('div.extension').forEach(div => {
          if (div.dataset.nosearch) return;
          div.style.display = '';
          if (activeTags.length < 1) return;
          let myTags = div.querySelector('div.extension-search-tags');
          if (!myTags || myTags == null) {
            div.style.display = 'none';
            return;
          }
          myTags = myTags.dataset.tags.split(',');
          const matched = myTags.filter(tag => activeTags.includes(tag));
          if (matched.length > 0) {
            return;
          }
          div.style.display = 'none';
        });
      }

      setTimeout(_ => {
        // Mobile shit
        if (screen.availWidth < 218) document.querySelector('div.toSmall-box').scrollIntoView();
        // Search stuff
        const searchInput = document.querySelector('input.search-input');
        searchInput.oninput = function(e) {
          const searchQuery = e.srcElement.value;
          search(searchQuery);
        }
        // Funny ass thing
        if (queryParams.has('TWunlocked')) {
          Array.from(document.querySelectorAll('div.extension-buttons')).forEach(element => {
            const url = element.children[0].dataset.url;
            element.innerHTML = (`
              <button class="open" data-post="${url}">Load extension</button>
            `);
          });
        }
      }, 500);
    </script>

    <% if (mode === 'desktop') { %>
    <script>
      // Mock API for testing outside of desktop app
      if (typeof TWD === 'undefined') {
        console.log('MOCK: Desktop API object does not exist -- using a mock instead');
        var TWD = {
          extensions: {
            loadExtension: (url) => new Promise((resolve, reject) => {
              console.log(`MOCK: Loading ${url}...`);
              setTimeout(() => {
                console.log(`MOCK: Loaded ${url}`);
                if (Math.random() > 0.5) {
                  resolve();
                } else {
                  reject(new Error('Demo error'));
                }
              }, Math.random() * 1000 + 50);
            }),
          },
        };
      }

      function sleep(ms) {
        return new Promise((resolve) => setTimeout(resolve, ms));
      }

      document.addEventListener('click', (e) => {
        var toLoad = e.target.getAttribute('data-load');
        if (toLoad) {
          e.target.classList.add('loading');
          e.target.disabled = true;
          Promise.all([
            TWD.extensions.loadExtension(toLoad),
            sleep(500),
          ])
            .then(() => {
              e.target.disabled = false;
              e.target.classList.remove('loading');
            })
            .catch((error) => {
              alert(error);
              e.target.disabled = false;
              e.target.classList.remove('loading');
            });
        }
      });
    </script>
    <% } %>

    <%
    const banner = (extensionFile, options = {}, afterHTML) => {
      if (extensionFile.endsWith('.js')) {
        return `Do not add .js when calling banner(): ${extensionFile}`;
      }
      afterHTML = afterHTML ?? '';
      const imageSource = extensionImages[extensionFile] ? `images/${extensionImages[extensionFile]}` : 'images/unknown.svg';
      const imageClasses = ["extension-image"];
      if (options.invertDark) imageClasses.push("invert-dark");
      return `
      <div class="extension-banner">
        <!-- @css-ignore -->
        <img loading="lazy" src="${imageSource}" class="${imageClasses.join(' ')}" style="${options.style ?? ''}">
        <div class="extension-buttons">
            <button class="copy-url" data-url="${host}${extensionFile}.js">Copy Code</button>
            <button class="copy" data-copy="${host}${extensionFile}.js">Copy URL</button>
            ${mode === "desktop" ? (`
              <button style="display:none" class="open" data-load="${host}${extensionFile}.js">Add Extension</button>
            `) : (`
              <a style="display:none" href="${getLinkToRun(`${extensionFile}.js`)}" class="open">Open Extension</a>
            `)}
        </div>
        ${ afterHTML }
      </div>`
    };

    const img = (extensionFile) => {
      if (extensionImages[extensionFile]) return `images/${extensionImages[extensionFile]}`;
      return 'images/unknown.svg';
    };
    %>

    <%
      const tags = function(icons) {
        let html = `<div class="extension-tags">`;
        for (const icon of icons) {
          switch (icon) {
            case 'hardware':
              html += '\n<img src="assets/hardware-icon.svg" title="Requires Hardware" class="extension-tag-icon">';
              break;
            case 'internet':
              html += '\n<img src="assets/internet-icon.svg" title="Requires Internet" class="extension-tag-icon">';
              break;
            case 'mobile':
              html += '\n<img src="assets/mobile-icon.svg" title="Mobile-Only Features" class="extension-tag-icon">';
              break;
            default:
              console.warn('Unknown icon found: ' + icon)
          }
        }
        html += '\n</div>';
        return html;
      }

      const credit = function(users) {
        const placeholder = `<div class="extension-boxing-outer credit-box">
          <div class="extension-boxing-inner">
            <br>
            <b>Made By:</b>
            <br>
            #placeholder
          </div>
        </div>`;
        let html = ``;
        if (typeof users !== 'object') return '';
        if (users.length < 1) {
          return '';
        }
        if (users.length == 1) {
          return placeholder.replace('#placeholder', `<p><a href="${users[0][1]}">${users[0][0]}</a></p>`);
        }
        if (typeof users[0] === 'string') {
          return placeholder.replace('#placeholder', `<p><a href="${users[1]}">${users[0]}</a></p>`);
        }
        const lastUser = users.pop(users.length);
        let i = 0;
        for (const user of users) {
          html += `<p><a href="${user[1]}">${user[0]}</a>${ i < users.length-1 ? ', ' : ' and ' }</p>`;
          i++;
        }
        html += `<p><a href="${lastUser[1]}">${lastUser[0]}</a>.</p>`
        return placeholder.replace('#placeholder', html);
      }

      const iCard = function(url, description) {
        const i_card_size = 20;
        return `<div class="i-card-wrapper">
          <img class="i-card" src="assets/info-circle.svg" loading="lazy" width="${i_card_size}" height="${i_card_size}" title="${description}" data-icard="${url}"></img>
        </div>`;
      }

      const bannerExpansion = function(iCard, isNew, isUpdated) {
        if (!!isUpdated) isNew = false, isUpdated = true;
        if (!!isNew) isUpdated = false, isNew = true;
        iCard = iCard ?? '';
        if (isUpdated) isUpdated = `\n<img class="extension-news-banner" src="assets/update-banner.svg" loading="lazy" title="This extension has been updated recently."></img>`;
          else isUpdated = '';
        if (isNew) isNew = `\n<img class="extension-news-banner" src="assets/new-banner.svg" loading="lazy" title="This extension is new to the gallery!"></img>`;
          else isNew = '';
        return `${iCard}${isNew}${isUpdated}`;
      }

      const sTag = function(tag) {
        return `<div class="search-tag" data-active="0" data-tag="${tag}">
          <span>${tag}</span>
        </div>`
      }

      const searchTags = function(tags) {
        return `<div class="extension-search-tags" data-tags="${tags.join(',').toLowerCase()}"></div>`;
      }
    %>

    <div class="section extensions-outer">
      <div class="search-outer">
        <input class="search-input" type="text" placeholder="Search..."/>
        <%- sTag('experimental') %>
        <%- sTag('advanced') %>
      </div>
      <div class="extensions">
        <div class="extension">
          <%- banner('Placeholder', {}, `${bannerExpansion(iCard(null, 'Very cool placeholder website!'))}`)%>
          <h3>Placeholder</h3>
          <p>A placeholder for people to use when adding extensions :P</p>
          <%- credit([['Placeholder', '#'], ['Placeholder SR', '#'], ['Placeholder JR', '#']]) %>
          <%- tags(['internet', 'hardware', 'mobile']) %>
          <%- searchTags(['experimental', 'advanced']) %>
        </div>

        <div class="extension">
          <%- banner('TurboCharged') %>
          <h3>TurboCharged</h3>
          <p>Add blocks to the base scratch categories :&gt;<br>Credits in extension.</p>
        </div>

        <div class="extension">
          <%- banner('0znzw/audioPlus') %>
          <h3>Audio+</h3>
          <p>Completely new audio system.</p>
          <%- credit(['Ashime', 'https://scratch.mit.edu/users/0znzw/']) %>
        </div>

        <div class="extension">
          <%- banner('0znzw/NicheToolbox', {}, `${bannerExpansion(undefined, false, true)}`) %>
          <h3>Niche Toolbox</h3>
          <p>Some blocks for niche use cases.</p>
          <%- credit(['Ashime', 'https://scratch.mit.edu/users/0znzw/']) %>
        </div>

        <div class="extension">
          <%- banner('Lily/CommentBlocks2', {}, bannerExpansion(iCard('extended_description/commentblocks2.html', 'Extended description'))) %>
          <h3>Comment Blocks+</h3>
          <p>Annotate your scripts.</p>
          <%- credit(['LilyMakesThings', 'https://scratch.mit.edu/users/LilyMakesThings/']) %>
        </div>

        <div class="extension">
          <%- banner('0znzw/0tils') %>
          <h3>0tils</h3>
          <p>My first personal extension.</p>
          <%- credit(['Ashime', 'https://scratch.mit.edu/users/0znzw/']) %>
        </div>

        <div class="extension">
          <%- banner('0znzw/QueryParams') %>
          <h3>Query Parameters</h3>
          <p>Access Query Parameters.</p>
          <%- credit(['Ashime', 'https://scratch.mit.edu/users/0znzw/']) %>
        </div>

        <div class="extension" style="display:none;">
          <%- banner('0znzw/LocalStorageUnlocked') %>
          <h3>LocalStorage</h3>
          <p>Store data persistently, Like cookies.<br>but better and its unlocked.</p>
          <%- credit(['Ashime', 'https://scratch.mit.edu/users/0znzw/']) %>
        </div>

        <div class="extension" style="display: none;">
          <%- banner('CST1229/inlineblocks', {}, bannerExpansion(iCard('extended_description/inlineblocks.html', 'Extended description'))) %>
          <h3>Inline Blocks</h3>
          <p>(moved to Script Manager)<br>Like custom reporters, but you code directly inside the "reporter".</p>
          <%- credit([['CST1229', 'https://github.com/CST1229/'], ['LilyMakesThings', 'https://scratch.mit.edu/users/LilyMakesThings/']]) %>
        </div>

        <div class="extension">
          <%- banner('0znzw/ScriptManagement') %>
          <h3>Script Manager</h3>
          <p>Manage scripts and threads, allowing for better control of your project.</p>
          <%- credit([
            ['Ashime', 'https://scratch.mit.edu/users/0znzw/'], ['CST1229', 'https://scratch.mit.edu/users/CST1229/'],
            ['FurryR', 'https://github.com/FurryR/']
          ]) %>
        </div>

        <div class="extension">
          <%- banner('0znzw/SwitchCase') %>
          <h3>Switch Case</h3>
          <p>Some blocks for replacing if statments.</p>
          <%- credit(['Ashime', 'https://scratch.mit.edu/users/0znzw/']) %>
        </div>

        <div class="extension">
          <%- banner('0znzw/PeriodicTable') %>
          <h3>Periodic Table</h3>
          <p>You can now get periodic table elements!</p>
          <%- credit(['Ashime', 'https://scratch.mit.edu/users/0znzw/']) %>
        </div>

        <div class="extension">
          <%- banner('0znzw/MatrixPlus') %>
          <h3>Matrix+</h3>
          <p>Additions to the microbit matrix extension!</p>
          <%- credit(['Ashime', 'https://scratch.mit.edu/users/0znzw/']) %>
          <%- tags(['hardware']) %>
        </div>

        <div class="extension">
          <%- banner('ION/Since2k') %>
          <h3>Since 2000</h3>
          <p>More blocks related to since 2000, allowing you to calculate time easier.</p>
          <%- credit(['ION', 'https://scratch.mit.edu/users/ionslayer/']) %>
        </div>

        <div class="extension">
          <%- banner('Yoreni/breakEternityScratch') %>
          <h3>Breaking Eternity</h3>
          <p>Its like big int but with decimals and more features!</p>
          <%- credit(['Yoreni', 'https://github.com/Yoreni/']) %>
        </div>

        <div class="extension">
          <%- banner('0znzw/DocumentEvents') %>
          <h3>Document Events</h3>
          <p>Some cool events ran on the document.</p>
          <%- credit(['Ashime', 'https://scratch.mit.edu/users/0znzw/']) %>
        </div>

        <div class="extension">
          <%- banner('0znzw/SpriteSheets') %>
          <h3>Sprite-Sheets</h3>
          <p>Handle Sprite Sheets! (fancy yes yes /j).</p>
          <%- credit(['Ashime', 'https://scratch.mit.edu/users/0znzw/']) %>
        </div>

        <div class="extension">
          <%- banner('0znzw/spellCheck') %>
          <h3>SpellCheck</h3>
          <p>Oh yes, its spellcheck, bare bones spellcheck :).</p>
          <%- credit(['Ashime', 'https://scratch.mit.edu/users/0znzw/']) %>
        </div>

        <div class="extension">
          <%- banner('0znzw/MimeDB') %>
          <h3>MimeDB</h3>
          <p>Detect MIME types of file extensions and get the MIME type of an extension.</p>
          <%- credit(['Ashime', 'https://scratch.mit.edu/users/0znzw/']) %>
        </div>

        <div class="extension">
          <%- banner('adacraft/browser') %>
          <h3>Browser - adacraft</h3>
          <p>Browser utilities.</p>
          <%- credit(['adacraft', 'https://adacraft.org/']) %>
          <%- tags(['internet']) %>
        </div>

        <div class="extension" style="display:none;" data-nosearch="1">
          <%- banner('0znzw/ScratchRedux') %>
          <h3>Scratch Redux</h3>
          <p>Grab values from the Redux!</p>
          <%- credit(['Ashime', 'https://scratch.mit.edu/users/0znzw/']) %>
        </div>

        <div class="extension">
          <%- banner('0znzw/RightClickMenu') %>
          <h3>Right Click Menu</h3>
          <p>Disable and enable the right click menu.</p>
          <%- credit(['Ashime', 'https://scratch.mit.edu/users/0znzw/']) %>
        </div>

        <div class="extension">
          <%- banner('0znzw/DOMPurify') %>
          <h3>DOMPurify</h3>
          <p>Sanitize user inputted HTML.</p>
          <%- credit(['Ashime', 'https://scratch.mit.edu/users/0znzw/']) %>
        </div>

        <div class="extension">
          <%- banner('0znzw/HtmlEntitys') %>
          <h3>HTML Entitys</h3>
          <p>Encode user inputted HTML. (better version of "HTML Encode")</p>
          <%- credit(['Ashime', 'https://scratch.mit.edu/users/0znzw/']) %>
        </div>

        <div class="extension">
          <%- banner('0znzw/FunneImageBlocks') %>
          <h3>Image Blocks</h3>
          <p>They are blocks, but are they?</p>
          <%- credit(['Ashime', 'https://scratch.mit.edu/users/0znzw/']) %>
          <%- tags(['internet']) %>
        </div>

        <div class="extension">
          <%- banner('0znzw/ScopeVariables', {}, `${bannerExpansion(iCard('/survs-gallery/extended_description/0znzw/ScopeVariables.html', 'Extended description.'))}`) %>
          <h3>Scope Variables</h3>
          <p>Manage your variables in block like structure.</p>
          <%- credit(['Ashime', 'https://scratch.mit.edu/users/0znzw/']) %>
          <%- searchTags(['advanced']) %>
        </div>

        <div class="extension" style="display: none;"  data-nosearch="1">
          <%- banner('0znzw/ErrorStop') %>
          <h3>Error Stop</h3>
          <p>Stop blocks from making errors and pausing your scripts.</p>
          <%- credit(['Ashime', 'https://scratch.mit.edu/users/0znzw/']) %>
          <%- searchTags(['advanced']) %>
        </div>

        <div class="extension">
          <%- banner('0znzw/MoreButtons') %>
          <h3>More Buttons</h3>
          <p>Add or remove buttons to the toolbar! (packager broken)</p>
          <%- credit(['Ashime', 'https://scratch.mit.edu/users/0znzw/']) %>
          <%- searchTags(['advanced']) %>
        </div>
      </div>
    </div>

    <footer class="section">
      <p>TurboWarp is not affiliated with Scratch, the Scratch Team, or the Scratch Foundation.</p>
      <div class="links">
        <a href="https://docs.turbowarp.org/development/custom-extensions">Developer Documentation</a>
      </div>
    </footer>
  </body>
</html>
